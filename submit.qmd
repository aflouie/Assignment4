---
title: "Assignment 4"
author: "Allison Louie"
format:
  html:
    embed-resources: true
---

```{r}
library(tidyverse)
library(microbenchmark)
library(parallel)
library(foreach)
library(future)
library(dplyr)
library(matrixStats)
library(RSQLite)
library(DBI)
```

# HPC

```{r}
# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  apply(mat, 1, cumsum)
}
```

## **Question 1**

Using the dataset generated below (`dat`), check that the output of both of your new functions matches the output of the original functions. Then use `microbenchmark` to check that your version is actually faster.

```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)
```

```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
```

```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

## **Question 2**

Rewrite the previous code using `parLapply()` (or your parallelization method of choice) to parallelize it. Run the code once, using `system.time()`, to show that your version is faster.

```{r}
cl <- makeCluster(4)
set.seed(1231)
system.time({
  ans <- unlist(parLapply(cl, 1:4000, sim_pi, n = 10000))
  print(mean(ans))
})

# Stop the parallel cluster when done
stopCluster(cl)
```

# **SQL**

```{r}
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

## **Question 3**

How many many movies are available in each `rating` category?

```{sql connection=con}
SELECT rating, COUNT(*) AS num_movies
FROM film
GROUP BY rating;
```

## **Question 4**

What is the average replacement cost and rental rate for each `rating` category?

```{sql connection=con}
SELECT rating, AVG(replacement_cost) AS avg_replacement_cost, AVG(rental_rate) AS avg_rental_rate
FROM film
GROUP BY rating;
```

## **Question 5**

Use table `film_category` together with `film` to find how many films there are with each category ID.

```{sql connection=con}
SELECT fc.category_id, COUNT(*) AS num_films
FROM film_category AS fc
INNER JOIN film AS f ON fc.film_id = f.film_id
GROUP BY fc.category_id;
```

## **Question 6**

Incorporate the `category` table into the answer to the previous question to find the name of the most popular category.

```{sql connection=con}
SELECT c.name AS category_name, COUNT(*) AS num_films
FROM film_category AS fc
INNER JOIN category AS c ON fc.category_id = c.category_id
INNER JOIN film AS f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY num_films DESC
LIMIT 1;
```
